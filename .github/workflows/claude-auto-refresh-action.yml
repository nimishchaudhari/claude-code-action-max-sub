name: Claude Code Assistant with Enhanced Token Fallback

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch: # Allows manual triggering
  schedule:
    # Refresh token every 6 hours to prevent expiration
    - cron: "0 */6 * * *"

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write # Required for OIDC authentication
  actions: write

jobs:
  claude-with-fallback:
    # Only run if comment contains @claude or if it's a scheduled/manual run
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 1: Try Claude Code with existing credentials
      - name: Run Claude Code Action (Primary OAuth)
        id: claude_primary
        if: github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment'
        continue-on-error: true
        uses: nimishchaudhari/claude-code-action-max-sub@main
        with:
          use_oauth: true
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          allowed_tools: 'Task,Bash,Glob,Grep,LS,Read,Edit,MultiEdit,Write,NotebookRead,NotebookEdit,TodoRead,TodoWrite,mcp__github_file_ops__commit_files,mcp__github_file_ops__delete_files,mcp__github__add_issue_comment,mcp__github__add_pull_request_review_comment,mcp__github__create_branch,mcp__github__create_issue,mcp__github__create_or_update_file,mcp__github__create_pull_request,mcp__github__create_pull_request_review,mcp__github__create_repository,mcp__github__delete_file,mcp__github__fork_repository,mcp__github__get_code_scanning_alert,mcp__github__get_commit,mcp__github__get_file_contents,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__get_me,mcp__github__get_pull_request,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_files,mcp__github__get_pull_request_reviews,mcp__github__get_pull_request_status,mcp__github__get_secret_scanning_alert,mcp__github__get_tag,mcp__github__list_branches,mcp__github__list_code_scanning_alerts,mcp__github__list_commits,mcp__github__list_issues,mcp__github__list_pull_requests,mcp__github__list_secret_scanning_alerts,mcp__github__list_tags,mcp__github__merge_pull_request,mcp__github__push_files,mcp__github__search_code,mcp__github__search_issues,mcp__github__search_repositories,mcp__github__search_users,mcp__github__update_issue,mcp__github__update_issue_comment,mcp__github__update_pull_request,mcp__github__update_pull_request_branch,mcp__github__update_pull_request_comment'
          custom_instructions: "You have also been granted tools for editing files and running bun commands (install, run, test, typecheck) for testing your changes: bun install, bun test, bun run format, bun typecheck."          
          timeout_minutes: "60"
          assignee_trigger: '@claude'
          model: 'claude-sonnet-4-20250514'

      # Step 3a: If primary failed (expired credentials), refresh tokens using proven script
      - name: Refresh OAuth Token (Fallback)
        id: refresh_token
        if: |
          (github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') && 
          steps.claude_primary.outcome == 'failure'
        continue-on-error: true
        env:
          CLAUDE_REFRESH_TOKEN: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          UPDATE_GITHUB_SECRET: true
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "üîÑ Primary OAuth attempt failed, refreshing tokens..."
          echo "üîê Using $([ -n "${{ secrets.PAT_TOKEN }}" ] && echo "Personal Access Token" || echo "GitHub Token")"
          
          # Use the proven working Node.js script
          node scripts/refresh-token.js

      # Step 3b: Retry Claude Code with refreshed tokens
      - name: Run Claude Code Action (Refreshed OAuth)
        id: claude_refreshed
        if: |
          (github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') && 
          steps.claude_primary.outcome == 'failure' && 
          steps.refresh_token.outcome == 'success'
        continue-on-error: true
        uses: nimishchaudhari/claude-code-action-max-sub@main
        with:
          use_oauth: true
          claude_access_token: ${{ steps.refresh_token.outputs.access_token }}
          claude_refresh_token: ${{ steps.refresh_token.outputs.refresh_token }}
          claude_expires_at: ${{ steps.refresh_token.outputs.expires_at }}
          allowed_tools: 'Task,Bash,Glob,Grep,LS,Read,Edit,MultiEdit,Write,NotebookRead,NotebookEdit,TodoRead,TodoWrite,mcp__github_file_ops__commit_files,mcp__github_file_ops__delete_files,mcp__github__add_issue_comment,mcp__github__add_pull_request_review_comment,mcp__github__create_branch,mcp__github__create_issue,mcp__github__create_or_update_file,mcp__github__create_pull_request,mcp__github__create_pull_request_review,mcp__github__create_repository,mcp__github__delete_file,mcp__github__fork_repository,mcp__github__get_code_scanning_alert,mcp__github__get_commit,mcp__github__get_file_contents,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__get_me,mcp__github__get_pull_request,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_files,mcp__github__get_pull_request_reviews,mcp__github__get_pull_request_status,mcp__github__get_secret_scanning_alert,mcp__github__get_tag,mcp__github__list_branches,mcp__github__list_code_scanning_alerts,mcp__github__list_commits,mcp__github__list_issues,mcp__github__list_pull_requests,mcp__github__list_secret_scanning_alerts,mcp__github__list_tags,mcp__github__merge_pull_request,mcp__github__push_files,mcp__github__search_code,mcp__github__search_issues,mcp__github__search_repositories,mcp__github__search_users,mcp__github__update_issue,mcp__github__update_issue_comment,mcp__github__update_pull_request,mcp__github__update_pull_request_branch,mcp__github__update_pull_request_comment'
          custom_instructions: "You have also been granted tools for editing files and running bun commands (install, run, test, typecheck) for testing your changes: bun install, bun test, bun run format, bun typecheck."          
          timeout_minutes: "60"
          assignee_trigger: '@claude'
          model: 'claude-sonnet-4-20250514'

      # Final Fallback: API Key authentication if OAuth completely fails
      - name: Run Claude Code Action (API Key Fallback)
        if: |
          (github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') && 
          steps.claude_primary.outcome == 'failure' && 
          (steps.refresh_token.outcome == 'failure' || steps.claude_refreshed.outcome == 'failure')
        uses: nimishchaudhari/claude-code-action-max-sub@main
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          allowed_tools: 'Task,Bash,Glob,Grep,LS,Read,Edit,MultiEdit,Write,NotebookRead,NotebookEdit,TodoRead,TodoWrite,mcp__github_file_ops__commit_files,mcp__github_file_ops__delete_files,mcp__github__add_issue_comment,mcp__github__add_pull_request_review_comment,mcp__github__create_branch,mcp__github__create_issue,mcp__github__create_or_update_file,mcp__github__create_pull_request,mcp__github__create_pull_request_review,mcp__github__create_repository,mcp__github__delete_file,mcp__github__fork_repository,mcp__github__get_code_scanning_alert,mcp__github__get_commit,mcp__github__get_file_contents,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__get_me,mcp__github__get_pull_request,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_files,mcp__github__get_pull_request_reviews,mcp__github__get_pull_request_status,mcp__github__get_secret_scanning_alert,mcp__github__get_tag,mcp__github__list_branches,mcp__github__list_code_scanning_alerts,mcp__github__list_commits,mcp__github__list_issues,mcp__github__list_pull_requests,mcp__github__list_secret_scanning_alerts,mcp__github__list_tags,mcp__github__merge_pull_request,mcp__github__push_files,mcp__github__search_code,mcp__github__search_issues,mcp__github__search_repositories,mcp__github__search_users,mcp__github__update_issue,mcp__github__update_issue_comment,mcp__github__update_pull_request,mcp__github__update_pull_request_branch,mcp__github__update_pull_request_comment'
          custom_instructions: "You have also been granted tools for editing files and running bun commands (install, run, test, typecheck) for testing your changes: bun install, bun test, bun run format, bun typecheck."          
          timeout_minutes: "60"
          assignee_trigger: '@claude'
          anthropic_model: "claude-opus-4-20250514"

      # Scheduled token refresh (no Claude Code execution)
      - name: Scheduled Token Refresh
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        env:
          CLAUDE_REFRESH_TOKEN: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          UPDATE_GITHUB_SECRET: true
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "üîÑ Performing scheduled token refresh..."
          echo "üîê Using $([ -n "${{ secrets.PAT_TOKEN }}" ] && echo "Personal Access Token" || echo "GitHub Token")"
          
          # Use the proven working Node.js script
          node scripts/refresh-token.js
          
          echo "‚úÖ Scheduled token refresh completed successfully"
          echo "Next refresh will occur at the next scheduled time"

      # Log authentication status summary
      - name: Log Authentication Status
        if: always() && (github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment')
        run: |
          echo "üîç Authentication Status Summary:"
          echo "Primary OAuth attempt: ${{ steps.claude_primary.outcome }}"
          echo "Token refresh result: ${{ steps.refresh_token.outcome }}"
          echo "Refreshed OAuth attempt: ${{ steps.claude_refreshed.outcome }}"
          
          if [[ "${{ steps.claude_primary.outcome }}" == "success" ]]; then
            echo "‚úÖ Claude Code executed successfully with existing OAuth tokens"
          elif [[ "${{ steps.claude_refreshed.outcome }}" == "success" ]]; then
            echo "‚úÖ Claude Code executed successfully after token refresh"
          elif [[ "${{ steps.refresh_token.outcome }}" == "failure" ]]; then
            echo "‚ö†Ô∏è  Token refresh failed - used API key fallback"
            echo "üí° Consider checking OAuth endpoint accessibility and refresh token validity"
          else
            echo "‚úÖ Claude Code executed with API key fallback"
          fi